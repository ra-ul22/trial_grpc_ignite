# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from . import dataCRUD_pb2 as dataCRUD__pb2


class dataCRUDStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.insertingData = channel.unary_unary(
                '/dataCRUD/insertingData',
                request_serializer=dataCRUD__pb2.insertUpdate_request.SerializeToString,
                response_deserializer=dataCRUD__pb2.readDelete_response.FromString,
                )
        self.updatingData = channel.unary_unary(
                '/dataCRUD/updatingData',
                request_serializer=dataCRUD__pb2.insertUpdate_request.SerializeToString,
                response_deserializer=dataCRUD__pb2.readDelete_response.FromString,
                )
        self.readingData = channel.unary_unary(
                '/dataCRUD/readingData',
                request_serializer=dataCRUD__pb2.readDelete_request.SerializeToString,
                response_deserializer=dataCRUD__pb2.readDelete_response.FromString,
                )
        self.deletingData = channel.unary_unary(
                '/dataCRUD/deletingData',
                request_serializer=dataCRUD__pb2.readDelete_request.SerializeToString,
                response_deserializer=dataCRUD__pb2.readDelete_response.FromString,
                )


class dataCRUDServicer(object):
    """Missing associated documentation comment in .proto file."""

    def insertingData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def updatingData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def readingData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def deletingData(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_dataCRUDServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'insertingData': grpc.unary_unary_rpc_method_handler(
                    servicer.insertingData,
                    request_deserializer=dataCRUD__pb2.insertUpdate_request.FromString,
                    response_serializer=dataCRUD__pb2.readDelete_response.SerializeToString,
            ),
            'updatingData': grpc.unary_unary_rpc_method_handler(
                    servicer.updatingData,
                    request_deserializer=dataCRUD__pb2.insertUpdate_request.FromString,
                    response_serializer=dataCRUD__pb2.readDelete_response.SerializeToString,
            ),
            'readingData': grpc.unary_unary_rpc_method_handler(
                    servicer.readingData,
                    request_deserializer=dataCRUD__pb2.readDelete_request.FromString,
                    response_serializer=dataCRUD__pb2.readDelete_response.SerializeToString,
            ),
            'deletingData': grpc.unary_unary_rpc_method_handler(
                    servicer.deletingData,
                    request_deserializer=dataCRUD__pb2.readDelete_request.FromString,
                    response_serializer=dataCRUD__pb2.readDelete_response.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'dataCRUD', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class dataCRUD(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def insertingData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataCRUD/insertingData',
            dataCRUD__pb2.insertUpdate_request.SerializeToString,
            dataCRUD__pb2.readDelete_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def updatingData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataCRUD/updatingData',
            dataCRUD__pb2.insertUpdate_request.SerializeToString,
            dataCRUD__pb2.readDelete_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def readingData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataCRUD/readingData',
            dataCRUD__pb2.readDelete_request.SerializeToString,
            dataCRUD__pb2.readDelete_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def deletingData(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/dataCRUD/deletingData',
            dataCRUD__pb2.readDelete_request.SerializeToString,
            dataCRUD__pb2.readDelete_response.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
